1) Hypervisor uses the concept called Virtualization.
2) Virtualization is a concept which creates a multiple virtual machines or servers.
It is a logical sepration of new machines (it may or may be different operating systems) on top of your physical server. 
Virtual server is a basically a logical isolation.
3) In Virtualization each of the machine have operating system and on the top of the virtualization you will run your applications. The virtual machines are tightly seprated they doesn't share anything, they have own boundaries.
===================================================================================
Qu: If virtualization working very well then why we moved towards the concept of container?
==> The biggest disadvantage of virtualization is we are not using the resources to it's fullest capacity.
Let we have physical machine of 100GB RAM and 100 CPU and we have created 4 virtual machines with 20GB and 20CPU each for logical isolation for respective applications.
However, after some days we have seen that the application one in Virtual machine one is only using 15GB of RAM and 5 CPU with highest threshold. It will be waste of 5 GB of RAM and 15 CPU of that particular virtual machine. We need to pay for that unused waste of RAM 
and CPU. Opex (operational cost) of project would be getting high.
However, virtualization is very secured in terms of containerization due to tight isolation of operating systems.

To get better idea please refer image Hypervisor.png
=======================================================================================
EC2 instance is running out of memory is a very less.
We are not creating the number of EC2 instances per application. Like no any company in this world can create number of EC2 instance per application.
EC2 instances are flexible in nature however maintaining the number of EC2 instances is cumbersome process, and here the containers are comes into the picture.
========================================================================================
1. Containers have solved the problems with virtual machines.
2. Containers are very light weight in nature.
3. Containers do not have the complete operating system
4 Containers uses the resources such as RAM OR STORAGE from the host/physical machine's operating system.
5. Containers have minimal operating system or we say they have base image.
6. Container is nothing but a package or bundle which is a combination of base image + your application + application libraries + system dependencies.
7. System dependencies like your application need python libraries etc.
8. Why containers are the light weight in nature?
   ==> They do not have a complete operationg system they have minimal image.
        OR base image and this base image have system dependencies.
        This Base Image + System dependencies + Application Libraries form a container or a docker image.
9. Docker is a set of platform as a service (PAAS) products that use OS-level virtualization to deliver software in packages called containers.
========================================================================================

Container Lifecycle or Docker Lifecycle:
1. Write a docker file 
2. Execute dockerfile and create an Image (by using docker build command)
3. Execute an Image to create a container. (by using docker run command)

You've to put your all commands (application configurations) into dockerfile and submit that file into the docker engine 

Docker engines are single point of failures, if docker engine fails then entire container system would also fail. 
To solve this problem and also the layer problems of image the Builda tool is used.
======================================================================================

Containers doesn't share the file systems with each other,
if containers shares the file structure to the other containers ( like:
/bin: contains binary executable files, such as the ls, cp, and ps commands.
/sbin: contains system binary executable files, such as the init and shutdown commands.
/etc: contains configuration files for various system services.
/lib: contains library files that are used by the binary executables.
/usr: contains user-related files and utilities, such as applications, libraries, and documentation.
/var: contains variable data, such as log files, spool files, and temporary files.
/root: is the home directory of the root user.
) 
then it is a biggest security comporomised.
The containers are then not secured in this case.
This file structure are not part of the host operating system kernel
they are part of the host minimal image or base image.

Docker containers are designed to be minimal, only including what is necessary for the application to run, further reducing their size.

official ubuntu VM image it will be close to ~ 2.3 GB however, the container created
for the same ubuntu image will only have 22MB size.

====================================================================================

Qu. what are the files and folders containers used from the Host Operating System?
==>
    The host's file system: Docker containers can access the host file system using bind mounts, which allow the container to read and write files in the host file system.

    Networking stack: The host's networking stack is used to provide network connectivity to the container. Docker containers can be connected to the host's network directly or through a virtual network.

    System calls: The host's kernel handles system calls from the container, which is how the container accesses the host's resources, such as CPU, memory, and I/O.

    Namespaces: Docker containers use Linux namespaces to create isolated environments for the container's processes. Namespaces provide isolation for resources such as the file system, process ID, and network.

    Control groups (cgroups): Docker containers use cgroups to limit and control the amount of resources, such as CPU, memory, and I/O, that a container can access.
    
    It's important to note that while a container uses resources from the host operating system, it is still isolated from the host and other containers, so changes to the container do not affect the host or other containers.

    therefore, in a nutshell, container base images are typically smaller compared to VM images because they are designed to be minimalist and only contain the necessary components for running a specific application or service. VMs, on the other hand, emulate an entire operating system, including all its libraries, utilities, and system files, resulting in a much larger size.
====================================================================================

